input,output,expected_output
"def calculate_sum(a: int, b: int) -> int:","```python
def calculate_sum(a: int, b: int) -> int:
    """"""Calculate the sum of two integers.

    Args:
        a (int): The first integer to add.
        b (int): The second integer to add.

    Returns:
        int: The sum of the two input integers.
    """"""
    return a + b
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'a' and 'b'. 4. Include a 'Returns:' section describing the integer sum.
def get_user_data(user_id: str) -> dict:,"```python
def get_user_data(user_id: str) -> dict:
    """"""Retrieve user data from the database.

    Args:
        user_id (str): The unique identifier for the user.

    Returns:
        dict: A dictionary containing the user's data, such as name, email, and account details.
    """"""
    # Function implementation goes here
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'user_id'. 4. Include a 'Returns:' section describing the dictionary of user data.
"def connect_to_database(connection_string: str, timeout: int = 30) -> bool:","```python
def connect_to_database(connection_string: str, timeout: int = 30) -> bool:
    """"""Establishes a connection to the database using the provided connection string.

    Args:
        connection_string (str): The connection string used to connect to the database.
        timeout (int, optional): The number of seconds to wait before timing out. Defaults to 30.

    Returns:
        bool: True if the connection is established successfully, False otherwise.
    """"""
    # Implementation code goes here
    pass
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'connection_string' and 'timeout'. 4. Include a 'Returns:' section describing the boolean connection status.
"def process_text_file(file_path: str, encoding: str = 'utf-8') -> str:","```python
def process_text_file(file_path: str, encoding: str = 'utf-8') -> str:
    """"""Process and read the contents of a text file.

    Args:
        file_path (str): The path to the text file to be processed.
        encoding (str, optional): The character encoding of the file. Defaults to 'utf-8'.

    Returns:
        str: The processed text content from the file.
    """"""
    with open(file_path, 'r', encoding=encoding) as file:
        content = file.read()
    return content
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'file_path' and 'encoding'. 4. Include a 'Returns:' section describing the processed text content.
def normalize_vector(vector: list[float]) -> list[float]:,"```python
def normalize_vector(vector: list[float]) -> list[float]:
    """"""Normalize a vector to have a magnitude of 1.

    Args:
        vector (list[float]): A list of float numbers representing the vector to be normalized.

    Returns:
        list[float]: A list of floats representing the normalized vector with a magnitude of 1.
    """"""
    magnitude = sum(x**2 for x in vector) ** 0.5
    if magnitude == 0:
        return [0.0] * len(vector)
    return [x / magnitude for x in vector]
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'vector'. 4. Include a 'Returns:' section describing the normalized vector.
"def send_email(recipient: str, subject: str, body: str):","```python
def send_email(recipient: str, subject: str, body: str):
    """"""Sends an email to the specified recipient.

    Args:
        recipient (str): The email address of the recipient.
        subject (str): The subject line of the email.
        body (str): The main content of the email message.
    """"""
    # Function implementation goes here
    pass
```","The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'recipient', 'subject', and 'body'. 4. Not include a 'Returns:' section as the function returns None."
def is_palindrome(s: str) -> bool:,"```python
def is_palindrome(s: str) -> bool:
    """"""Check if a string is a palindrome.

    Args:
        s: A string to be checked.

    Returns:
        A boolean indicating whether the string is a palindrome. Returns True if the string
        reads the same forwards and backwards, ignoring case and non-alphanumeric characters;
        otherwise, returns False.
    """"""
    # Normalize the string by removing non-alphanumeric characters and converting to lowercase
    normalized_str = ''.join(char.lower() for char in s if char.isalnum())
    # Check if the normalized string is equal to its reverse
    return normalized_str == normalized_str[::-1]
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 's'. 4. Include a 'Returns:' section describing the boolean result.
"def merge_dictionaries(d1: dict, d2: dict) -> dict:","```python
def merge_dictionaries(d1: dict, d2: dict) -> dict:
    """"""Merge two dictionaries into one.

    Args:
        d1 (dict): The first dictionary to merge.
        d2 (dict): The second dictionary to merge. If there are duplicate keys, 
                   the values from d2 will overwrite those from d1.

    Returns:
        dict: A new dictionary containing all key-value pairs from both d1 and d2.
    """"""
    merged_dict = d1.copy()  # Start with a copy of the first dictionary
    merged_dict.update(d2)   # Update with the second dictionary
    return merged_dict
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'd1' and 'd2'. 4. Include a 'Returns:' section describing the merged dictionary.
def find_prime_numbers(limit: int) -> list[int]:,"```python
def find_prime_numbers(limit: int) -> list[int]:
    """"""Generate a list of prime numbers up to a given limit.

    Args:
        limit (int): The upper boundary to find prime numbers. Only primes less than or equal to this limit are included in the list.

    Returns:
        list[int]: A list of prime numbers up to and including the limit, if applicable.
    """"""
    primes = []
    for num in range(2, limit + 1):
        is_prime = True
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'limit'. 4. Include a 'Returns:' section describing the list of prime numbers.
"def sort_list_of_tuples(data: list[tuple], sort_key_index: int) -> list[tuple]:","```python
def sort_list_of_tuples(data: list[tuple], sort_key_index: int) -> list[tuple]:
    """"""Sorts a list of tuples based on a specified tuple element index.

    Args:
        data (list[tuple]): The list of tuples to be sorted.
        sort_key_index (int): The index of the tuple element to sort by.

    Returns:
        list[tuple]: The list of tuples sorted by the specified element index.
    """"""
    return sorted(data, key=lambda x: x[sort_key_index])
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'data' and 'sort_key_index'. 4. Include a 'Returns:' section describing the sorted list.
def remove_duplicates_from_list(items: list) -> list:,"```python
def remove_duplicates_from_list(items: list) -> list:
    """"""Remove duplicate elements from a list.

    Args:
        items (list): A list of elements which may contain duplicates.

    Returns:
        list: A new list containing only the unique elements from the original list, maintaining their original order.
    """"""
    seen = set()
    unique_items = []
    for item in items:
        if item not in seen:
            unique_items.append(item)
            seen.add(item)
    return unique_items
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'items'. 4. Include a 'Returns:' section describing the list with duplicates removed.
def calculate_factorial(n: int) -> int:,"```python
def calculate_factorial(n: int) -> int:
    """"""Calculate the factorial of a given non-negative integer.

    Args:
        n (int): A non-negative integer whose factorial is to be computed.

    Returns:
        int: The factorial of the input integer `n`.
    """"""
    if n == 0 or n == 1:
        return 1
    else:
        return n * calculate_factorial(n - 1)
```",The docstring must: 1. Be in Google Python Style. 2. Include a one-line summary. 3. Include an 'Args:' section describing 'n'. 4. Include a 'Returns:' section describing the factorial result.
